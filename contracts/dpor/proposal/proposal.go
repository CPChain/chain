// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package proposal

import (
	"math/big"
	"strings"

	cpchain "bitbucket.org/cpchain/chain"
	"bitbucket.org/cpchain/chain/accounts/abi"
	"bitbucket.org/cpchain/chain/accounts/abi/bind"
	"bitbucket.org/cpchain/chain/types"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"
)

// CongressInterfaceABI is the input ABI used to generate the binding from.
const CongressInterfaceABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isInCongress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCongressNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// CongressInterfaceBin is the compiled bytecode used for deploying new contracts.
const CongressInterfaceBin = `0x`

// DeployCongressInterface deploys a new cpchain contract, binding an instance of CongressInterface to it.
func DeployCongressInterface(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CongressInterface, error) {
	parsed, err := abi.JSON(strings.NewReader(CongressInterfaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CongressInterfaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CongressInterface{CongressInterfaceCaller: CongressInterfaceCaller{contract: contract}, CongressInterfaceTransactor: CongressInterfaceTransactor{contract: contract}, CongressInterfaceFilterer: CongressInterfaceFilterer{contract: contract}}, nil
}

// CongressInterface is an auto generated Go binding around an cpchain contract.
type CongressInterface struct {
	CongressInterfaceCaller     // Read-only binding to the contract
	CongressInterfaceTransactor // Write-only binding to the contract
	CongressInterfaceFilterer   // Log filterer for contract events
}

// CongressInterfaceCaller is an auto generated read-only Go binding around an cpchain contract.
type CongressInterfaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CongressInterfaceTransactor is an auto generated write-only Go binding around an cpchain contract.
type CongressInterfaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CongressInterfaceFilterer is an auto generated log filtering Go binding around an cpchain contract events.
type CongressInterfaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CongressInterfaceSession is an auto generated Go binding around an cpchain contract,
// with pre-set call and transact options.
type CongressInterfaceSession struct {
	Contract     *CongressInterface // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// CongressInterfaceCallerSession is an auto generated read-only Go binding around an cpchain contract,
// with pre-set call options.
type CongressInterfaceCallerSession struct {
	Contract *CongressInterfaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// CongressInterfaceTransactorSession is an auto generated write-only Go binding around an cpchain contract,
// with pre-set transact options.
type CongressInterfaceTransactorSession struct {
	Contract     *CongressInterfaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// CongressInterfaceRaw is an auto generated low-level Go binding around an cpchain contract.
type CongressInterfaceRaw struct {
	Contract *CongressInterface // Generic contract binding to access the raw methods on
}

// CongressInterfaceCallerRaw is an auto generated low-level read-only Go binding around an cpchain contract.
type CongressInterfaceCallerRaw struct {
	Contract *CongressInterfaceCaller // Generic read-only contract binding to access the raw methods on
}

// CongressInterfaceTransactorRaw is an auto generated low-level write-only Go binding around an cpchain contract.
type CongressInterfaceTransactorRaw struct {
	Contract *CongressInterfaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCongressInterface creates a new instance of CongressInterface, bound to a specific deployed contract.
func NewCongressInterface(address common.Address, backend bind.ContractBackend) (*CongressInterface, error) {
	contract, err := bindCongressInterface(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CongressInterface{CongressInterfaceCaller: CongressInterfaceCaller{contract: contract}, CongressInterfaceTransactor: CongressInterfaceTransactor{contract: contract}, CongressInterfaceFilterer: CongressInterfaceFilterer{contract: contract}}, nil
}

// NewCongressInterfaceCaller creates a new read-only instance of CongressInterface, bound to a specific deployed contract.
func NewCongressInterfaceCaller(address common.Address, caller bind.ContractCaller) (*CongressInterfaceCaller, error) {
	contract, err := bindCongressInterface(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CongressInterfaceCaller{contract: contract}, nil
}

// NewCongressInterfaceTransactor creates a new write-only instance of CongressInterface, bound to a specific deployed contract.
func NewCongressInterfaceTransactor(address common.Address, transactor bind.ContractTransactor) (*CongressInterfaceTransactor, error) {
	contract, err := bindCongressInterface(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CongressInterfaceTransactor{contract: contract}, nil
}

// NewCongressInterfaceFilterer creates a new log filterer instance of CongressInterface, bound to a specific deployed contract.
func NewCongressInterfaceFilterer(address common.Address, filterer bind.ContractFilterer) (*CongressInterfaceFilterer, error) {
	contract, err := bindCongressInterface(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CongressInterfaceFilterer{contract: contract}, nil
}

// bindCongressInterface binds a generic wrapper to an already deployed contract.
func bindCongressInterface(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CongressInterfaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CongressInterface *CongressInterfaceRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CongressInterface.Contract.CongressInterfaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CongressInterface *CongressInterfaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CongressInterface.Contract.CongressInterfaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CongressInterface *CongressInterfaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CongressInterface.Contract.CongressInterfaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CongressInterface *CongressInterfaceCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CongressInterface.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CongressInterface *CongressInterfaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CongressInterface.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CongressInterface *CongressInterfaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CongressInterface.Contract.contract.Transact(opts, method, params...)
}

// GetCongressNum is a free data retrieval call binding the contract method 0x6656b375.
//
// Solidity: function getCongressNum() constant returns(uint256)
func (_CongressInterface *CongressInterfaceCaller) GetCongressNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _CongressInterface.contract.Call(opts, out, "getCongressNum")
	return *ret0, err
}

// GetCongressNum is a free data retrieval call binding the contract method 0x6656b375.
//
// Solidity: function getCongressNum() constant returns(uint256)
func (_CongressInterface *CongressInterfaceSession) GetCongressNum() (*big.Int, error) {
	return _CongressInterface.Contract.GetCongressNum(&_CongressInterface.CallOpts)
}

// GetCongressNum is a free data retrieval call binding the contract method 0x6656b375.
//
// Solidity: function getCongressNum() constant returns(uint256)
func (_CongressInterface *CongressInterfaceCallerSession) GetCongressNum() (*big.Int, error) {
	return _CongressInterface.Contract.GetCongressNum(&_CongressInterface.CallOpts)
}

// IsInCongress is a free data retrieval call binding the contract method 0x27bd4ba7.
//
// Solidity: function isInCongress(_addr address) constant returns(bool)
func (_CongressInterface *CongressInterfaceCaller) IsInCongress(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CongressInterface.contract.Call(opts, out, "isInCongress", _addr)
	return *ret0, err
}

// IsInCongress is a free data retrieval call binding the contract method 0x27bd4ba7.
//
// Solidity: function isInCongress(_addr address) constant returns(bool)
func (_CongressInterface *CongressInterfaceSession) IsInCongress(_addr common.Address) (bool, error) {
	return _CongressInterface.Contract.IsInCongress(&_CongressInterface.CallOpts, _addr)
}

// IsInCongress is a free data retrieval call binding the contract method 0x27bd4ba7.
//
// Solidity: function isInCongress(_addr address) constant returns(bool)
func (_CongressInterface *CongressInterfaceCallerSession) IsInCongress(_addr common.Address) (bool, error) {
	return _CongressInterface.Contract.IsInCongress(&_CongressInterface.CallOpts, _addr)
}

// ProposalABI is the input ABI used to generate the binding from.
const ProposalABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getLockedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint16\"}],\"name\":\"setIDLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"checkTimeout\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setAmountThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"setVoteThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getApprovalCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"approval\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCongressNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvalThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalsIDList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"congress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"idLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setApprovalThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setMaxPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProposalsCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"submit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getVoteCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_congressAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedTime\",\"type\":\"uint256\"}],\"name\":\"SubmitProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"ApprovalProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"VoteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"WithdrawMoney\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"proposalTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"ownerRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ownerRefundAll\",\"type\":\"event\"}]"

// ProposalBin is the compiled bytecode used for deploying new contracts.
const ProposalBin = ``

// DeployProposal deploys a new cpchain contract, binding an instance of Proposal to it.
func DeployProposal(auth *bind.TransactOpts, backend bind.ContractBackend, _congressAddr common.Address) (common.Address, *types.Transaction, *Proposal, error) {
	parsed, err := abi.JSON(strings.NewReader(ProposalABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProposalBin), backend, _congressAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Proposal{ProposalCaller: ProposalCaller{contract: contract}, ProposalTransactor: ProposalTransactor{contract: contract}, ProposalFilterer: ProposalFilterer{contract: contract}}, nil
}

// Proposal is an auto generated Go binding around an cpchain contract.
type Proposal struct {
	ProposalCaller     // Read-only binding to the contract
	ProposalTransactor // Write-only binding to the contract
	ProposalFilterer   // Log filterer for contract events
}

// ProposalCaller is an auto generated read-only Go binding around an cpchain contract.
type ProposalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalTransactor is an auto generated write-only Go binding around an cpchain contract.
type ProposalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalFilterer is an auto generated log filtering Go binding around an cpchain contract events.
type ProposalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProposalSession is an auto generated Go binding around an cpchain contract,
// with pre-set call and transact options.
type ProposalSession struct {
	Contract     *Proposal         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProposalCallerSession is an auto generated read-only Go binding around an cpchain contract,
// with pre-set call options.
type ProposalCallerSession struct {
	Contract *ProposalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ProposalTransactorSession is an auto generated write-only Go binding around an cpchain contract,
// with pre-set transact options.
type ProposalTransactorSession struct {
	Contract     *ProposalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ProposalRaw is an auto generated low-level Go binding around an cpchain contract.
type ProposalRaw struct {
	Contract *Proposal // Generic contract binding to access the raw methods on
}

// ProposalCallerRaw is an auto generated low-level read-only Go binding around an cpchain contract.
type ProposalCallerRaw struct {
	Contract *ProposalCaller // Generic read-only contract binding to access the raw methods on
}

// ProposalTransactorRaw is an auto generated low-level write-only Go binding around an cpchain contract.
type ProposalTransactorRaw struct {
	Contract *ProposalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProposal creates a new instance of Proposal, bound to a specific deployed contract.
func NewProposal(address common.Address, backend bind.ContractBackend) (*Proposal, error) {
	contract, err := bindProposal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Proposal{ProposalCaller: ProposalCaller{contract: contract}, ProposalTransactor: ProposalTransactor{contract: contract}, ProposalFilterer: ProposalFilterer{contract: contract}}, nil
}

// NewProposalCaller creates a new read-only instance of Proposal, bound to a specific deployed contract.
func NewProposalCaller(address common.Address, caller bind.ContractCaller) (*ProposalCaller, error) {
	contract, err := bindProposal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProposalCaller{contract: contract}, nil
}

// NewProposalTransactor creates a new write-only instance of Proposal, bound to a specific deployed contract.
func NewProposalTransactor(address common.Address, transactor bind.ContractTransactor) (*ProposalTransactor, error) {
	contract, err := bindProposal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProposalTransactor{contract: contract}, nil
}

// NewProposalFilterer creates a new log filterer instance of Proposal, bound to a specific deployed contract.
func NewProposalFilterer(address common.Address, filterer bind.ContractFilterer) (*ProposalFilterer, error) {
	contract, err := bindProposal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProposalFilterer{contract: contract}, nil
}

// bindProposal binds a generic wrapper to an already deployed contract.
func bindProposal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProposalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proposal *ProposalRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Proposal.Contract.ProposalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proposal *ProposalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.Contract.ProposalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proposal *ProposalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proposal.Contract.ProposalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proposal *ProposalCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Proposal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proposal *ProposalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proposal *ProposalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proposal.Contract.contract.Transact(opts, method, params...)
}

// AmountThreshold is a free data retrieval call binding the contract method 0x8f82921e.
//
// Solidity: function amountThreshold() constant returns(uint256)
func (_Proposal *ProposalCaller) AmountThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "amountThreshold")
	return *ret0, err
}

// AmountThreshold is a free data retrieval call binding the contract method 0x8f82921e.
//
// Solidity: function amountThreshold() constant returns(uint256)
func (_Proposal *ProposalSession) AmountThreshold() (*big.Int, error) {
	return _Proposal.Contract.AmountThreshold(&_Proposal.CallOpts)
}

// AmountThreshold is a free data retrieval call binding the contract method 0x8f82921e.
//
// Solidity: function amountThreshold() constant returns(uint256)
func (_Proposal *ProposalCallerSession) AmountThreshold() (*big.Int, error) {
	return _Proposal.Contract.AmountThreshold(&_Proposal.CallOpts)
}

// ApprovalThreshold is a free data retrieval call binding the contract method 0x7d0eef61.
//
// Solidity: function approvalThreshold() constant returns(uint256)
func (_Proposal *ProposalCaller) ApprovalThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "approvalThreshold")
	return *ret0, err
}

// ApprovalThreshold is a free data retrieval call binding the contract method 0x7d0eef61.
//
// Solidity: function approvalThreshold() constant returns(uint256)
func (_Proposal *ProposalSession) ApprovalThreshold() (*big.Int, error) {
	return _Proposal.Contract.ApprovalThreshold(&_Proposal.CallOpts)
}

// ApprovalThreshold is a free data retrieval call binding the contract method 0x7d0eef61.
//
// Solidity: function approvalThreshold() constant returns(uint256)
func (_Proposal *ProposalCallerSession) ApprovalThreshold() (*big.Int, error) {
	return _Proposal.Contract.ApprovalThreshold(&_Proposal.CallOpts)
}

// Congress is a free data retrieval call binding the contract method 0x86b0befc.
//
// Solidity: function congress() constant returns(address)
func (_Proposal *ProposalCaller) Congress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "congress")
	return *ret0, err
}

// Congress is a free data retrieval call binding the contract method 0x86b0befc.
//
// Solidity: function congress() constant returns(address)
func (_Proposal *ProposalSession) Congress() (common.Address, error) {
	return _Proposal.Contract.Congress(&_Proposal.CallOpts)
}

// Congress is a free data retrieval call binding the contract method 0x86b0befc.
//
// Solidity: function congress() constant returns(address)
func (_Proposal *ProposalCallerSession) Congress() (common.Address, error) {
	return _Proposal.Contract.Congress(&_Proposal.CallOpts)
}

// Enabled is a free data retrieval call binding the contract method 0x238dafe0.
//
// Solidity: function enabled() constant returns(bool)
func (_Proposal *ProposalCaller) Enabled(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "enabled")
	return *ret0, err
}

// Enabled is a free data retrieval call binding the contract method 0x238dafe0.
//
// Solidity: function enabled() constant returns(bool)
func (_Proposal *ProposalSession) Enabled() (bool, error) {
	return _Proposal.Contract.Enabled(&_Proposal.CallOpts)
}

// Enabled is a free data retrieval call binding the contract method 0x238dafe0.
//
// Solidity: function enabled() constant returns(bool)
func (_Proposal *ProposalCallerSession) Enabled() (bool, error) {
	return _Proposal.Contract.Enabled(&_Proposal.CallOpts)
}

// GetApprovalCnt is a free data retrieval call binding the contract method 0x4ce666cb.
//
// Solidity: function getApprovalCnt(id string) constant returns(uint256)
func (_Proposal *ProposalCaller) GetApprovalCnt(opts *bind.CallOpts, id string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getApprovalCnt", id)
	return *ret0, err
}

// GetApprovalCnt is a free data retrieval call binding the contract method 0x4ce666cb.
//
// Solidity: function getApprovalCnt(id string) constant returns(uint256)
func (_Proposal *ProposalSession) GetApprovalCnt(id string) (*big.Int, error) {
	return _Proposal.Contract.GetApprovalCnt(&_Proposal.CallOpts, id)
}

// GetApprovalCnt is a free data retrieval call binding the contract method 0x4ce666cb.
//
// Solidity: function getApprovalCnt(id string) constant returns(uint256)
func (_Proposal *ProposalCallerSession) GetApprovalCnt(id string) (*big.Int, error) {
	return _Proposal.Contract.GetApprovalCnt(&_Proposal.CallOpts, id)
}

// GetCongressNum is a free data retrieval call binding the contract method 0x6656b375.
//
// Solidity: function getCongressNum() constant returns(uint256)
func (_Proposal *ProposalCaller) GetCongressNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getCongressNum")
	return *ret0, err
}

// GetCongressNum is a free data retrieval call binding the contract method 0x6656b375.
//
// Solidity: function getCongressNum() constant returns(uint256)
func (_Proposal *ProposalSession) GetCongressNum() (*big.Int, error) {
	return _Proposal.Contract.GetCongressNum(&_Proposal.CallOpts)
}

// GetCongressNum is a free data retrieval call binding the contract method 0x6656b375.
//
// Solidity: function getCongressNum() constant returns(uint256)
func (_Proposal *ProposalCallerSession) GetCongressNum() (*big.Int, error) {
	return _Proposal.Contract.GetCongressNum(&_Proposal.CallOpts)
}

// GetLockedAmount is a free data retrieval call binding the contract method 0x25c494b0.
//
// Solidity: function getLockedAmount(id string) constant returns(uint256)
func (_Proposal *ProposalCaller) GetLockedAmount(opts *bind.CallOpts, id string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getLockedAmount", id)
	return *ret0, err
}

// GetLockedAmount is a free data retrieval call binding the contract method 0x25c494b0.
//
// Solidity: function getLockedAmount(id string) constant returns(uint256)
func (_Proposal *ProposalSession) GetLockedAmount(id string) (*big.Int, error) {
	return _Proposal.Contract.GetLockedAmount(&_Proposal.CallOpts, id)
}

// GetLockedAmount is a free data retrieval call binding the contract method 0x25c494b0.
//
// Solidity: function getLockedAmount(id string) constant returns(uint256)
func (_Proposal *ProposalCallerSession) GetLockedAmount(id string) (*big.Int, error) {
	return _Proposal.Contract.GetLockedAmount(&_Proposal.CallOpts, id)
}

// GetLockedTime is a free data retrieval call binding the contract method 0x0b78a371.
//
// Solidity: function getLockedTime(id string) constant returns(uint256)
func (_Proposal *ProposalCaller) GetLockedTime(opts *bind.CallOpts, id string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getLockedTime", id)
	return *ret0, err
}

// GetLockedTime is a free data retrieval call binding the contract method 0x0b78a371.
//
// Solidity: function getLockedTime(id string) constant returns(uint256)
func (_Proposal *ProposalSession) GetLockedTime(id string) (*big.Int, error) {
	return _Proposal.Contract.GetLockedTime(&_Proposal.CallOpts, id)
}

// GetLockedTime is a free data retrieval call binding the contract method 0x0b78a371.
//
// Solidity: function getLockedTime(id string) constant returns(uint256)
func (_Proposal *ProposalCallerSession) GetLockedTime(id string) (*big.Int, error) {
	return _Proposal.Contract.GetLockedTime(&_Proposal.CallOpts, id)
}

// GetOwner is a free data retrieval call binding the contract method 0x4aaf4a12.
//
// Solidity: function getOwner(id string) constant returns(address)
func (_Proposal *ProposalCaller) GetOwner(opts *bind.CallOpts, id string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getOwner", id)
	return *ret0, err
}

// GetOwner is a free data retrieval call binding the contract method 0x4aaf4a12.
//
// Solidity: function getOwner(id string) constant returns(address)
func (_Proposal *ProposalSession) GetOwner(id string) (common.Address, error) {
	return _Proposal.Contract.GetOwner(&_Proposal.CallOpts, id)
}

// GetOwner is a free data retrieval call binding the contract method 0x4aaf4a12.
//
// Solidity: function getOwner(id string) constant returns(address)
func (_Proposal *ProposalCallerSession) GetOwner(id string) (common.Address, error) {
	return _Proposal.Contract.GetOwner(&_Proposal.CallOpts, id)
}

// GetPeriod is a free data retrieval call binding the contract method 0x329c66d0.
//
// Solidity: function getPeriod(id string) constant returns(uint256)
func (_Proposal *ProposalCaller) GetPeriod(opts *bind.CallOpts, id string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getPeriod", id)
	return *ret0, err
}

// GetPeriod is a free data retrieval call binding the contract method 0x329c66d0.
//
// Solidity: function getPeriod(id string) constant returns(uint256)
func (_Proposal *ProposalSession) GetPeriod(id string) (*big.Int, error) {
	return _Proposal.Contract.GetPeriod(&_Proposal.CallOpts, id)
}

// GetPeriod is a free data retrieval call binding the contract method 0x329c66d0.
//
// Solidity: function getPeriod(id string) constant returns(uint256)
func (_Proposal *ProposalCallerSession) GetPeriod(id string) (*big.Int, error) {
	return _Proposal.Contract.GetPeriod(&_Proposal.CallOpts, id)
}

// GetProposalsCnt is a free data retrieval call binding the contract method 0xb29d7c01.
//
// Solidity: function getProposalsCnt() constant returns(uint256)
func (_Proposal *ProposalCaller) GetProposalsCnt(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getProposalsCnt")
	return *ret0, err
}

// GetProposalsCnt is a free data retrieval call binding the contract method 0xb29d7c01.
//
// Solidity: function getProposalsCnt() constant returns(uint256)
func (_Proposal *ProposalSession) GetProposalsCnt() (*big.Int, error) {
	return _Proposal.Contract.GetProposalsCnt(&_Proposal.CallOpts)
}

// GetProposalsCnt is a free data retrieval call binding the contract method 0xb29d7c01.
//
// Solidity: function getProposalsCnt() constant returns(uint256)
func (_Proposal *ProposalCallerSession) GetProposalsCnt() (*big.Int, error) {
	return _Proposal.Contract.GetProposalsCnt(&_Proposal.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x22b05ed2.
//
// Solidity: function getStatus(id string) constant returns(uint8)
func (_Proposal *ProposalCaller) GetStatus(opts *bind.CallOpts, id string) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getStatus", id)
	return *ret0, err
}

// GetStatus is a free data retrieval call binding the contract method 0x22b05ed2.
//
// Solidity: function getStatus(id string) constant returns(uint8)
func (_Proposal *ProposalSession) GetStatus(id string) (uint8, error) {
	return _Proposal.Contract.GetStatus(&_Proposal.CallOpts, id)
}

// GetStatus is a free data retrieval call binding the contract method 0x22b05ed2.
//
// Solidity: function getStatus(id string) constant returns(uint8)
func (_Proposal *ProposalCallerSession) GetStatus(id string) (uint8, error) {
	return _Proposal.Contract.GetStatus(&_Proposal.CallOpts, id)
}

// GetVoteCnt is a free data retrieval call binding the contract method 0xee223380.
//
// Solidity: function getVoteCnt(id string) constant returns(uint256)
func (_Proposal *ProposalCaller) GetVoteCnt(opts *bind.CallOpts, id string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "getVoteCnt", id)
	return *ret0, err
}

// GetVoteCnt is a free data retrieval call binding the contract method 0xee223380.
//
// Solidity: function getVoteCnt(id string) constant returns(uint256)
func (_Proposal *ProposalSession) GetVoteCnt(id string) (*big.Int, error) {
	return _Proposal.Contract.GetVoteCnt(&_Proposal.CallOpts, id)
}

// GetVoteCnt is a free data retrieval call binding the contract method 0xee223380.
//
// Solidity: function getVoteCnt(id string) constant returns(uint256)
func (_Proposal *ProposalCallerSession) GetVoteCnt(id string) (*big.Int, error) {
	return _Proposal.Contract.GetVoteCnt(&_Proposal.CallOpts, id)
}

// IdLength is a free data retrieval call binding the contract method 0x9e18a16d.
//
// Solidity: function idLength() constant returns(uint16)
func (_Proposal *ProposalCaller) IdLength(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "idLength")
	return *ret0, err
}

// IdLength is a free data retrieval call binding the contract method 0x9e18a16d.
//
// Solidity: function idLength() constant returns(uint16)
func (_Proposal *ProposalSession) IdLength() (uint16, error) {
	return _Proposal.Contract.IdLength(&_Proposal.CallOpts)
}

// IdLength is a free data retrieval call binding the contract method 0x9e18a16d.
//
// Solidity: function idLength() constant returns(uint16)
func (_Proposal *ProposalCallerSession) IdLength() (uint16, error) {
	return _Proposal.Contract.IdLength(&_Proposal.CallOpts)
}

// MaxPeriod is a free data retrieval call binding the contract method 0x49b9a67f.
//
// Solidity: function maxPeriod() constant returns(uint256)
func (_Proposal *ProposalCaller) MaxPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "maxPeriod")
	return *ret0, err
}

// MaxPeriod is a free data retrieval call binding the contract method 0x49b9a67f.
//
// Solidity: function maxPeriod() constant returns(uint256)
func (_Proposal *ProposalSession) MaxPeriod() (*big.Int, error) {
	return _Proposal.Contract.MaxPeriod(&_Proposal.CallOpts)
}

// MaxPeriod is a free data retrieval call binding the contract method 0x49b9a67f.
//
// Solidity: function maxPeriod() constant returns(uint256)
func (_Proposal *ProposalCallerSession) MaxPeriod() (*big.Int, error) {
	return _Proposal.Contract.MaxPeriod(&_Proposal.CallOpts)
}

// ProposalsIDList is a free data retrieval call binding the contract method 0x8046f293.
//
// Solidity: function proposalsIDList( uint256) constant returns(string)
func (_Proposal *ProposalCaller) ProposalsIDList(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "proposalsIDList", arg0)
	return *ret0, err
}

// ProposalsIDList is a free data retrieval call binding the contract method 0x8046f293.
//
// Solidity: function proposalsIDList( uint256) constant returns(string)
func (_Proposal *ProposalSession) ProposalsIDList(arg0 *big.Int) (string, error) {
	return _Proposal.Contract.ProposalsIDList(&_Proposal.CallOpts, arg0)
}

// ProposalsIDList is a free data retrieval call binding the contract method 0x8046f293.
//
// Solidity: function proposalsIDList( uint256) constant returns(string)
func (_Proposal *ProposalCallerSession) ProposalsIDList(arg0 *big.Int) (string, error) {
	return _Proposal.Contract.ProposalsIDList(&_Proposal.CallOpts, arg0)
}

// VoteThreshold is a free data retrieval call binding the contract method 0x4fe437d5.
//
// Solidity: function voteThreshold() constant returns(uint16)
func (_Proposal *ProposalCaller) VoteThreshold(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Proposal.contract.Call(opts, out, "voteThreshold")
	return *ret0, err
}

// VoteThreshold is a free data retrieval call binding the contract method 0x4fe437d5.
//
// Solidity: function voteThreshold() constant returns(uint16)
func (_Proposal *ProposalSession) VoteThreshold() (uint16, error) {
	return _Proposal.Contract.VoteThreshold(&_Proposal.CallOpts)
}

// VoteThreshold is a free data retrieval call binding the contract method 0x4fe437d5.
//
// Solidity: function voteThreshold() constant returns(uint16)
func (_Proposal *ProposalCallerSession) VoteThreshold() (uint16, error) {
	return _Proposal.Contract.VoteThreshold(&_Proposal.CallOpts)
}

// Approval is a paid mutator transaction binding the contract method 0x4f434285.
//
// Solidity: function approval(id string) returns()
func (_Proposal *ProposalTransactor) Approval(opts *bind.TransactOpts, id string) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "approval", id)
}

// Approval is a paid mutator transaction binding the contract method 0x4f434285.
//
// Solidity: function approval(id string) returns()
func (_Proposal *ProposalSession) Approval(id string) (*types.Transaction, error) {
	return _Proposal.Contract.Approval(&_Proposal.TransactOpts, id)
}

// Approval is a paid mutator transaction binding the contract method 0x4f434285.
//
// Solidity: function approval(id string) returns()
func (_Proposal *ProposalTransactorSession) Approval(id string) (*types.Transaction, error) {
	return _Proposal.Contract.Approval(&_Proposal.TransactOpts, id)
}

// CheckTimeout is a paid mutator transaction binding the contract method 0x33fe73b5.
//
// Solidity: function checkTimeout(id string) returns()
func (_Proposal *ProposalTransactor) CheckTimeout(opts *bind.TransactOpts, id string) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "checkTimeout", id)
}

// CheckTimeout is a paid mutator transaction binding the contract method 0x33fe73b5.
//
// Solidity: function checkTimeout(id string) returns()
func (_Proposal *ProposalSession) CheckTimeout(id string) (*types.Transaction, error) {
	return _Proposal.Contract.CheckTimeout(&_Proposal.TransactOpts, id)
}

// CheckTimeout is a paid mutator transaction binding the contract method 0x33fe73b5.
//
// Solidity: function checkTimeout(id string) returns()
func (_Proposal *ProposalTransactorSession) CheckTimeout(id string) (*types.Transaction, error) {
	return _Proposal.Contract.CheckTimeout(&_Proposal.TransactOpts, id)
}

// DisableContract is a paid mutator transaction binding the contract method 0x894ba833.
//
// Solidity: function disableContract() returns()
func (_Proposal *ProposalTransactor) DisableContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "disableContract")
}

// DisableContract is a paid mutator transaction binding the contract method 0x894ba833.
//
// Solidity: function disableContract() returns()
func (_Proposal *ProposalSession) DisableContract() (*types.Transaction, error) {
	return _Proposal.Contract.DisableContract(&_Proposal.TransactOpts)
}

// DisableContract is a paid mutator transaction binding the contract method 0x894ba833.
//
// Solidity: function disableContract() returns()
func (_Proposal *ProposalTransactorSession) DisableContract() (*types.Transaction, error) {
	return _Proposal.Contract.DisableContract(&_Proposal.TransactOpts)
}

// EnableContract is a paid mutator transaction binding the contract method 0x367edd32.
//
// Solidity: function enableContract() returns()
func (_Proposal *ProposalTransactor) EnableContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "enableContract")
}

// EnableContract is a paid mutator transaction binding the contract method 0x367edd32.
//
// Solidity: function enableContract() returns()
func (_Proposal *ProposalSession) EnableContract() (*types.Transaction, error) {
	return _Proposal.Contract.EnableContract(&_Proposal.TransactOpts)
}

// EnableContract is a paid mutator transaction binding the contract method 0x367edd32.
//
// Solidity: function enableContract() returns()
func (_Proposal *ProposalTransactorSession) EnableContract() (*types.Transaction, error) {
	return _Proposal.Contract.EnableContract(&_Proposal.TransactOpts)
}

// Refund is a paid mutator transaction binding the contract method 0xfe5f2e88.
//
// Solidity: function refund(id string) returns()
func (_Proposal *ProposalTransactor) Refund(opts *bind.TransactOpts, id string) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "refund", id)
}

// Refund is a paid mutator transaction binding the contract method 0xfe5f2e88.
//
// Solidity: function refund(id string) returns()
func (_Proposal *ProposalSession) Refund(id string) (*types.Transaction, error) {
	return _Proposal.Contract.Refund(&_Proposal.TransactOpts, id)
}

// Refund is a paid mutator transaction binding the contract method 0xfe5f2e88.
//
// Solidity: function refund(id string) returns()
func (_Proposal *ProposalTransactorSession) Refund(id string) (*types.Transaction, error) {
	return _Proposal.Contract.Refund(&_Proposal.TransactOpts, id)
}

// RefundAll is a paid mutator transaction binding the contract method 0x38e771ab.
//
// Solidity: function refundAll() returns()
func (_Proposal *ProposalTransactor) RefundAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "refundAll")
}

// RefundAll is a paid mutator transaction binding the contract method 0x38e771ab.
//
// Solidity: function refundAll() returns()
func (_Proposal *ProposalSession) RefundAll() (*types.Transaction, error) {
	return _Proposal.Contract.RefundAll(&_Proposal.TransactOpts)
}

// RefundAll is a paid mutator transaction binding the contract method 0x38e771ab.
//
// Solidity: function refundAll() returns()
func (_Proposal *ProposalTransactorSession) RefundAll() (*types.Transaction, error) {
	return _Proposal.Contract.RefundAll(&_Proposal.TransactOpts)
}

// SetAmountThreshold is a paid mutator transaction binding the contract method 0x3789ccaa.
//
// Solidity: function setAmountThreshold(threshold uint256) returns()
func (_Proposal *ProposalTransactor) SetAmountThreshold(opts *bind.TransactOpts, threshold *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "setAmountThreshold", threshold)
}

// SetAmountThreshold is a paid mutator transaction binding the contract method 0x3789ccaa.
//
// Solidity: function setAmountThreshold(threshold uint256) returns()
func (_Proposal *ProposalSession) SetAmountThreshold(threshold *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.SetAmountThreshold(&_Proposal.TransactOpts, threshold)
}

// SetAmountThreshold is a paid mutator transaction binding the contract method 0x3789ccaa.
//
// Solidity: function setAmountThreshold(threshold uint256) returns()
func (_Proposal *ProposalTransactorSession) SetAmountThreshold(threshold *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.SetAmountThreshold(&_Proposal.TransactOpts, threshold)
}

// SetApprovalThreshold is a paid mutator transaction binding the contract method 0xa0016b8c.
//
// Solidity: function setApprovalThreshold(threshold uint256) returns()
func (_Proposal *ProposalTransactor) SetApprovalThreshold(opts *bind.TransactOpts, threshold *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "setApprovalThreshold", threshold)
}

// SetApprovalThreshold is a paid mutator transaction binding the contract method 0xa0016b8c.
//
// Solidity: function setApprovalThreshold(threshold uint256) returns()
func (_Proposal *ProposalSession) SetApprovalThreshold(threshold *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.SetApprovalThreshold(&_Proposal.TransactOpts, threshold)
}

// SetApprovalThreshold is a paid mutator transaction binding the contract method 0xa0016b8c.
//
// Solidity: function setApprovalThreshold(threshold uint256) returns()
func (_Proposal *ProposalTransactorSession) SetApprovalThreshold(threshold *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.SetApprovalThreshold(&_Proposal.TransactOpts, threshold)
}

// SetIDLength is a paid mutator transaction binding the contract method 0x3378702a.
//
// Solidity: function setIDLength(length uint16) returns()
func (_Proposal *ProposalTransactor) SetIDLength(opts *bind.TransactOpts, length uint16) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "setIDLength", length)
}

// SetIDLength is a paid mutator transaction binding the contract method 0x3378702a.
//
// Solidity: function setIDLength(length uint16) returns()
func (_Proposal *ProposalSession) SetIDLength(length uint16) (*types.Transaction, error) {
	return _Proposal.Contract.SetIDLength(&_Proposal.TransactOpts, length)
}

// SetIDLength is a paid mutator transaction binding the contract method 0x3378702a.
//
// Solidity: function setIDLength(length uint16) returns()
func (_Proposal *ProposalTransactorSession) SetIDLength(length uint16) (*types.Transaction, error) {
	return _Proposal.Contract.SetIDLength(&_Proposal.TransactOpts, length)
}

// SetMaxPeriod is a paid mutator transaction binding the contract method 0xae1c9fc1.
//
// Solidity: function setMaxPeriod(period uint256) returns()
func (_Proposal *ProposalTransactor) SetMaxPeriod(opts *bind.TransactOpts, period *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "setMaxPeriod", period)
}

// SetMaxPeriod is a paid mutator transaction binding the contract method 0xae1c9fc1.
//
// Solidity: function setMaxPeriod(period uint256) returns()
func (_Proposal *ProposalSession) SetMaxPeriod(period *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.SetMaxPeriod(&_Proposal.TransactOpts, period)
}

// SetMaxPeriod is a paid mutator transaction binding the contract method 0xae1c9fc1.
//
// Solidity: function setMaxPeriod(period uint256) returns()
func (_Proposal *ProposalTransactorSession) SetMaxPeriod(period *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.SetMaxPeriod(&_Proposal.TransactOpts, period)
}

// SetVoteThreshold is a paid mutator transaction binding the contract method 0x3fec30c7.
//
// Solidity: function setVoteThreshold(threshold uint16) returns()
func (_Proposal *ProposalTransactor) SetVoteThreshold(opts *bind.TransactOpts, threshold uint16) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "setVoteThreshold", threshold)
}

// SetVoteThreshold is a paid mutator transaction binding the contract method 0x3fec30c7.
//
// Solidity: function setVoteThreshold(threshold uint16) returns()
func (_Proposal *ProposalSession) SetVoteThreshold(threshold uint16) (*types.Transaction, error) {
	return _Proposal.Contract.SetVoteThreshold(&_Proposal.TransactOpts, threshold)
}

// SetVoteThreshold is a paid mutator transaction binding the contract method 0x3fec30c7.
//
// Solidity: function setVoteThreshold(threshold uint16) returns()
func (_Proposal *ProposalTransactorSession) SetVoteThreshold(threshold uint16) (*types.Transaction, error) {
	return _Proposal.Contract.SetVoteThreshold(&_Proposal.TransactOpts, threshold)
}

// Submit is a paid mutator transaction binding the contract method 0xbf45554e.
//
// Solidity: function submit(id string, period uint256) returns()
func (_Proposal *ProposalTransactor) Submit(opts *bind.TransactOpts, id string, period *big.Int) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "submit", id, period)
}

// Submit is a paid mutator transaction binding the contract method 0xbf45554e.
//
// Solidity: function submit(id string, period uint256) returns()
func (_Proposal *ProposalSession) Submit(id string, period *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.Submit(&_Proposal.TransactOpts, id, period)
}

// Submit is a paid mutator transaction binding the contract method 0xbf45554e.
//
// Solidity: function submit(id string, period uint256) returns()
func (_Proposal *ProposalTransactorSession) Submit(id string, period *big.Int) (*types.Transaction, error) {
	return _Proposal.Contract.Submit(&_Proposal.TransactOpts, id, period)
}

// Vote is a paid mutator transaction binding the contract method 0xfc36e15b.
//
// Solidity: function vote(id string) returns()
func (_Proposal *ProposalTransactor) Vote(opts *bind.TransactOpts, id string) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "vote", id)
}

// Vote is a paid mutator transaction binding the contract method 0xfc36e15b.
//
// Solidity: function vote(id string) returns()
func (_Proposal *ProposalSession) Vote(id string) (*types.Transaction, error) {
	return _Proposal.Contract.Vote(&_Proposal.TransactOpts, id)
}

// Vote is a paid mutator transaction binding the contract method 0xfc36e15b.
//
// Solidity: function vote(id string) returns()
func (_Proposal *ProposalTransactorSession) Vote(id string) (*types.Transaction, error) {
	return _Proposal.Contract.Vote(&_Proposal.TransactOpts, id)
}

// Withdraw is a paid mutator transaction binding the contract method 0x31fb67c2.
//
// Solidity: function withdraw(id string) returns()
func (_Proposal *ProposalTransactor) Withdraw(opts *bind.TransactOpts, id string) (*types.Transaction, error) {
	return _Proposal.contract.Transact(opts, "withdraw", id)
}

// Withdraw is a paid mutator transaction binding the contract method 0x31fb67c2.
//
// Solidity: function withdraw(id string) returns()
func (_Proposal *ProposalSession) Withdraw(id string) (*types.Transaction, error) {
	return _Proposal.Contract.Withdraw(&_Proposal.TransactOpts, id)
}

// Withdraw is a paid mutator transaction binding the contract method 0x31fb67c2.
//
// Solidity: function withdraw(id string) returns()
func (_Proposal *ProposalTransactorSession) Withdraw(id string) (*types.Transaction, error) {
	return _Proposal.Contract.Withdraw(&_Proposal.TransactOpts, id)
}

// ProposalApprovalProposalIterator is returned from FilterApprovalProposal and is used to iterate over the raw logs and unpacked data for ApprovalProposal events raised by the Proposal contract.
type ProposalApprovalProposalIterator struct {
	Event *ProposalApprovalProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalApprovalProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalApprovalProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalApprovalProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalApprovalProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalApprovalProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalApprovalProposal represents a ApprovalProposal event raised by the Proposal contract.
type ProposalApprovalProposal struct {
	Who common.Address
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterApprovalProposal is a free log retrieval operation binding the contract event 0xb26290817ad095a3a22defdd6f5eace80fb6e59a651003e36cbb8fa0888621c6.
//
// Solidity: e ApprovalProposal(who address, id string)
func (_Proposal *ProposalFilterer) FilterApprovalProposal(opts *bind.FilterOpts) (*ProposalApprovalProposalIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "ApprovalProposal")
	if err != nil {
		return nil, err
	}
	return &ProposalApprovalProposalIterator{contract: _Proposal.contract, event: "ApprovalProposal", logs: logs, sub: sub}, nil
}

// WatchApprovalProposal is a free log subscription operation binding the contract event 0xb26290817ad095a3a22defdd6f5eace80fb6e59a651003e36cbb8fa0888621c6.
//
// Solidity: e ApprovalProposal(who address, id string)
func (_Proposal *ProposalFilterer) WatchApprovalProposal(opts *bind.WatchOpts, sink chan<- *ProposalApprovalProposal) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "ApprovalProposal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalApprovalProposal)
				if err := _Proposal.contract.UnpackLog(event, "ApprovalProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalSubmitProposalIterator is returned from FilterSubmitProposal and is used to iterate over the raw logs and unpacked data for SubmitProposal events raised by the Proposal contract.
type ProposalSubmitProposalIterator struct {
	Event *ProposalSubmitProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalSubmitProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalSubmitProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalSubmitProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalSubmitProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalSubmitProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalSubmitProposal represents a SubmitProposal event raised by the Proposal contract.
type ProposalSubmitProposal struct {
	Who          common.Address
	Id           string
	Period       *big.Int
	LockedAmount *big.Int
	LockedTime   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSubmitProposal is a free log retrieval operation binding the contract event 0xf1d48eb3f702138bbc89c6b153ac5d45b5de82dff3a73ff92536c68de6eca6c0.
//
// Solidity: e SubmitProposal(who address, id string, period uint256, lockedAmount uint256, lockedTime uint256)
func (_Proposal *ProposalFilterer) FilterSubmitProposal(opts *bind.FilterOpts) (*ProposalSubmitProposalIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "SubmitProposal")
	if err != nil {
		return nil, err
	}
	return &ProposalSubmitProposalIterator{contract: _Proposal.contract, event: "SubmitProposal", logs: logs, sub: sub}, nil
}

// WatchSubmitProposal is a free log subscription operation binding the contract event 0xf1d48eb3f702138bbc89c6b153ac5d45b5de82dff3a73ff92536c68de6eca6c0.
//
// Solidity: e SubmitProposal(who address, id string, period uint256, lockedAmount uint256, lockedTime uint256)
func (_Proposal *ProposalFilterer) WatchSubmitProposal(opts *bind.WatchOpts, sink chan<- *ProposalSubmitProposal) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "SubmitProposal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalSubmitProposal)
				if err := _Proposal.contract.UnpackLog(event, "SubmitProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalVoteProposalIterator is returned from FilterVoteProposal and is used to iterate over the raw logs and unpacked data for VoteProposal events raised by the Proposal contract.
type ProposalVoteProposalIterator struct {
	Event *ProposalVoteProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalVoteProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalVoteProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalVoteProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalVoteProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalVoteProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalVoteProposal represents a VoteProposal event raised by the Proposal contract.
type ProposalVoteProposal struct {
	Who common.Address
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterVoteProposal is a free log retrieval operation binding the contract event 0xe6c2413b9632c650bd61906b4c974a2fad9b87d8ad69fed22585f9c4dd77b322.
//
// Solidity: e VoteProposal(who address, id string)
func (_Proposal *ProposalFilterer) FilterVoteProposal(opts *bind.FilterOpts) (*ProposalVoteProposalIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "VoteProposal")
	if err != nil {
		return nil, err
	}
	return &ProposalVoteProposalIterator{contract: _Proposal.contract, event: "VoteProposal", logs: logs, sub: sub}, nil
}

// WatchVoteProposal is a free log subscription operation binding the contract event 0xe6c2413b9632c650bd61906b4c974a2fad9b87d8ad69fed22585f9c4dd77b322.
//
// Solidity: e VoteProposal(who address, id string)
func (_Proposal *ProposalFilterer) WatchVoteProposal(opts *bind.WatchOpts, sink chan<- *ProposalVoteProposal) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "VoteProposal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalVoteProposal)
				if err := _Proposal.contract.UnpackLog(event, "VoteProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalWithdrawMoneyIterator is returned from FilterWithdrawMoney and is used to iterate over the raw logs and unpacked data for WithdrawMoney events raised by the Proposal contract.
type ProposalWithdrawMoneyIterator struct {
	Event *ProposalWithdrawMoney // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalWithdrawMoneyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalWithdrawMoney)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalWithdrawMoney)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalWithdrawMoneyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalWithdrawMoneyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalWithdrawMoney represents a WithdrawMoney event raised by the Proposal contract.
type ProposalWithdrawMoney struct {
	Who common.Address
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWithdrawMoney is a free log retrieval operation binding the contract event 0xd8a7ba52c56408630a1950bdcca02a40743e0342d59bce1634c9dee6eb52654a.
//
// Solidity: e WithdrawMoney(who address, id string)
func (_Proposal *ProposalFilterer) FilterWithdrawMoney(opts *bind.FilterOpts) (*ProposalWithdrawMoneyIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "WithdrawMoney")
	if err != nil {
		return nil, err
	}
	return &ProposalWithdrawMoneyIterator{contract: _Proposal.contract, event: "WithdrawMoney", logs: logs, sub: sub}, nil
}

// WatchWithdrawMoney is a free log subscription operation binding the contract event 0xd8a7ba52c56408630a1950bdcca02a40743e0342d59bce1634c9dee6eb52654a.
//
// Solidity: e WithdrawMoney(who address, id string)
func (_Proposal *ProposalFilterer) WatchWithdrawMoney(opts *bind.WatchOpts, sink chan<- *ProposalWithdrawMoney) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "WithdrawMoney")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalWithdrawMoney)
				if err := _Proposal.contract.UnpackLog(event, "WithdrawMoney", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalOwnerRefundIterator is returned from FilterOwnerRefund and is used to iterate over the raw logs and unpacked data for OwnerRefund events raised by the Proposal contract.
type ProposalOwnerRefundIterator struct {
	Event *ProposalOwnerRefund // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalOwnerRefundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalOwnerRefund)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalOwnerRefund)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalOwnerRefundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalOwnerRefundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalOwnerRefund represents a OwnerRefund event raised by the Proposal contract.
type ProposalOwnerRefund struct {
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerRefund is a free log retrieval operation binding the contract event 0xd8b84cbbe2837b7d7608d160a2bde8065d418c294b2802f714277bc8dc692408.
//
// Solidity: e ownerRefund(id string)
func (_Proposal *ProposalFilterer) FilterOwnerRefund(opts *bind.FilterOpts) (*ProposalOwnerRefundIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "ownerRefund")
	if err != nil {
		return nil, err
	}
	return &ProposalOwnerRefundIterator{contract: _Proposal.contract, event: "ownerRefund", logs: logs, sub: sub}, nil
}

// WatchOwnerRefund is a free log subscription operation binding the contract event 0xd8b84cbbe2837b7d7608d160a2bde8065d418c294b2802f714277bc8dc692408.
//
// Solidity: e ownerRefund(id string)
func (_Proposal *ProposalFilterer) WatchOwnerRefund(opts *bind.WatchOpts, sink chan<- *ProposalOwnerRefund) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "ownerRefund")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalOwnerRefund)
				if err := _Proposal.contract.UnpackLog(event, "ownerRefund", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalOwnerRefundAllIterator is returned from FilterOwnerRefundAll and is used to iterate over the raw logs and unpacked data for OwnerRefundAll events raised by the Proposal contract.
type ProposalOwnerRefundAllIterator struct {
	Event *ProposalOwnerRefundAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalOwnerRefundAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalOwnerRefundAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalOwnerRefundAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalOwnerRefundAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalOwnerRefundAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalOwnerRefundAll represents a OwnerRefundAll event raised by the Proposal contract.
type ProposalOwnerRefundAll struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOwnerRefundAll is a free log retrieval operation binding the contract event 0x643a05825b61c5fee41ff4d7a93fcfa4ae8c82e7cfe012a71a422a3cbf8c3131.
//
// Solidity: e ownerRefundAll()
func (_Proposal *ProposalFilterer) FilterOwnerRefundAll(opts *bind.FilterOpts) (*ProposalOwnerRefundAllIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "ownerRefundAll")
	if err != nil {
		return nil, err
	}
	return &ProposalOwnerRefundAllIterator{contract: _Proposal.contract, event: "ownerRefundAll", logs: logs, sub: sub}, nil
}

// WatchOwnerRefundAll is a free log subscription operation binding the contract event 0x643a05825b61c5fee41ff4d7a93fcfa4ae8c82e7cfe012a71a422a3cbf8c3131.
//
// Solidity: e ownerRefundAll()
func (_Proposal *ProposalFilterer) WatchOwnerRefundAll(opts *bind.WatchOpts, sink chan<- *ProposalOwnerRefundAll) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "ownerRefundAll")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalOwnerRefundAll)
				if err := _Proposal.contract.UnpackLog(event, "ownerRefundAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProposalProposalTimeoutIterator is returned from FilterProposalTimeout and is used to iterate over the raw logs and unpacked data for ProposalTimeout events raised by the Proposal contract.
type ProposalProposalTimeoutIterator struct {
	Event *ProposalProposalTimeout // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProposalProposalTimeoutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProposalProposalTimeout)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProposalProposalTimeout)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProposalProposalTimeoutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProposalProposalTimeoutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProposalProposalTimeout represents a ProposalTimeout event raised by the Proposal contract.
type ProposalProposalTimeout struct {
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterProposalTimeout is a free log retrieval operation binding the contract event 0x1540f034983784d94a03cc1fd9cb6299859b69cc81c7856ae5e3ee3575a2bb4d.
//
// Solidity: e proposalTimeout(id string)
func (_Proposal *ProposalFilterer) FilterProposalTimeout(opts *bind.FilterOpts) (*ProposalProposalTimeoutIterator, error) {

	logs, sub, err := _Proposal.contract.FilterLogs(opts, "proposalTimeout")
	if err != nil {
		return nil, err
	}
	return &ProposalProposalTimeoutIterator{contract: _Proposal.contract, event: "proposalTimeout", logs: logs, sub: sub}, nil
}

// WatchProposalTimeout is a free log subscription operation binding the contract event 0x1540f034983784d94a03cc1fd9cb6299859b69cc81c7856ae5e3ee3575a2bb4d.
//
// Solidity: e proposalTimeout(id string)
func (_Proposal *ProposalFilterer) WatchProposalTimeout(opts *bind.WatchOpts, sink chan<- *ProposalProposalTimeout) (event.Subscription, error) {

	logs, sub, err := _Proposal.contract.WatchLogs(opts, "proposalTimeout")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProposalProposalTimeout)
				if err := _Proposal.contract.UnpackLog(event, "proposalTimeout", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SafeMathABI is the input ABI used to generate the binding from.
const SafeMathABI = "[]"

// SafeMathBin is the compiled bytecode used for deploying new contracts.
const SafeMathBin = `0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582088c1fa354983fa8aa67569fac42b5f417b8a5126470cbc1842695d60862c56f30029`

// DeploySafeMath deploys a new cpchain contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an cpchain contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an cpchain contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an cpchain contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an cpchain contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an cpchain contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an cpchain contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an cpchain contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an cpchain contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an cpchain contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an cpchain contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}

// SetABI is the input ABI used to generate the binding from.
const SetABI = "[]"

// SetBin is the compiled bytecode used for deploying new contracts.
const SetBin = `0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582044d103dc110ec1ea8661cd7eb037b82cdebae7fa6cfdad2b6f173d68a2c0fd160029`

// DeploySet deploys a new cpchain contract, binding an instance of Set to it.
func DeploySet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Set, error) {
	parsed, err := abi.JSON(strings.NewReader(SetABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Set{SetCaller: SetCaller{contract: contract}, SetTransactor: SetTransactor{contract: contract}, SetFilterer: SetFilterer{contract: contract}}, nil
}

// Set is an auto generated Go binding around an cpchain contract.
type Set struct {
	SetCaller     // Read-only binding to the contract
	SetTransactor // Write-only binding to the contract
	SetFilterer   // Log filterer for contract events
}

// SetCaller is an auto generated read-only Go binding around an cpchain contract.
type SetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SetTransactor is an auto generated write-only Go binding around an cpchain contract.
type SetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SetFilterer is an auto generated log filtering Go binding around an cpchain contract events.
type SetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SetSession is an auto generated Go binding around an cpchain contract,
// with pre-set call and transact options.
type SetSession struct {
	Contract     *Set              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SetCallerSession is an auto generated read-only Go binding around an cpchain contract,
// with pre-set call options.
type SetCallerSession struct {
	Contract *SetCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SetTransactorSession is an auto generated write-only Go binding around an cpchain contract,
// with pre-set transact options.
type SetTransactorSession struct {
	Contract     *SetTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SetRaw is an auto generated low-level Go binding around an cpchain contract.
type SetRaw struct {
	Contract *Set // Generic contract binding to access the raw methods on
}

// SetCallerRaw is an auto generated low-level read-only Go binding around an cpchain contract.
type SetCallerRaw struct {
	Contract *SetCaller // Generic read-only contract binding to access the raw methods on
}

// SetTransactorRaw is an auto generated low-level write-only Go binding around an cpchain contract.
type SetTransactorRaw struct {
	Contract *SetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSet creates a new instance of Set, bound to a specific deployed contract.
func NewSet(address common.Address, backend bind.ContractBackend) (*Set, error) {
	contract, err := bindSet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Set{SetCaller: SetCaller{contract: contract}, SetTransactor: SetTransactor{contract: contract}, SetFilterer: SetFilterer{contract: contract}}, nil
}

// NewSetCaller creates a new read-only instance of Set, bound to a specific deployed contract.
func NewSetCaller(address common.Address, caller bind.ContractCaller) (*SetCaller, error) {
	contract, err := bindSet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SetCaller{contract: contract}, nil
}

// NewSetTransactor creates a new write-only instance of Set, bound to a specific deployed contract.
func NewSetTransactor(address common.Address, transactor bind.ContractTransactor) (*SetTransactor, error) {
	contract, err := bindSet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SetTransactor{contract: contract}, nil
}

// NewSetFilterer creates a new log filterer instance of Set, bound to a specific deployed contract.
func NewSetFilterer(address common.Address, filterer bind.ContractFilterer) (*SetFilterer, error) {
	contract, err := bindSet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SetFilterer{contract: contract}, nil
}

// bindSet binds a generic wrapper to an already deployed contract.
func bindSet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Set *SetRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Set.Contract.SetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Set *SetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Set.Contract.SetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Set *SetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Set.Contract.SetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Set *SetCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Set.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Set *SetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Set.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Set *SetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Set.Contract.contract.Transact(opts, method, params...)
}
